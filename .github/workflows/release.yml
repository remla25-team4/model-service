name: Release Model Service

on:
  push:
    tags: ["v[0-9]+.[0-9]+.[0-9]+"] # Trigger on tags like v1.0.0, v0.2.3, etc.

jobs:
  build_and_release:
    runs-on: ubuntu-24.04
    permissions:
      contents: write
      packages: write
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Assuming requirements.txt is at the root of model-service repository
        # or in a 'model-service/' subdirectory if this workflow is in a mono-repo.
        # Adjust path if necessary.
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        elif [ -f model-service/requirements.txt ]; then
          pip install -r model-service/requirements.txt
        else
          echo "Warning: requirements.txt not found. Skipping pip install."
        fi

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ github.token }}

    - name: Parse version info from tag
      run: |
        RAW_VERSION=${{ github.ref_name }}
        VERSION=${RAW_VERSION#v} 
        MAJOR=$(echo "$VERSION" | cut -d . -f 1)
        MINOR=$(echo "$VERSION" | cut -d . -f 2)
        PATCH=$(echo "$VERSION" | cut -d . -f 3)
        echo "version=$VERSION" >> $GITHUB_ENV
        echo "version_major=$MAJOR" >> $GITHUB_ENV
        echo "version_minor=$MINOR" >> $GITHUB_ENV
        echo "version_patch=$PATCH" >> $GITHUB_ENV

#    - name: Update version in model-service/__init__.py and push to main
#      if: startsWith(github.ref, 'refs/tags/')
#      run: |
#        VERSION_TO_SET="${{ env.version }}"
#        INIT_PY_PATH="model-service/app/__init__.py" # Path for model-service
#
#        git config --global user.name 'GitHub Actions Bot'
#        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
#        git fetch origin main
#        git checkout -B main origin/main
#
#        mkdir -p "$(dirname "$INIT_PY_PATH")"
#        if [ ! -f "$INIT_PY_PATH" ]; then
#          echo "__version__ = \"$VERSION_TO_SET\"" > "$INIT_PY_PATH"
#        fi
#
#        if grep -q "__version__ = " "$INIT_PY_PATH"; then
#          CURRENT_VERSION_IN_MAIN_INIT_PY=$(grep -oP '__version__ = "\K[^"]+' "$INIT_PY_PATH" || echo "not_found")
#          if [ "$CURRENT_VERSION_IN_MAIN_INIT_PY" != "$VERSION_TO_SET" ]; then
#            sed -i "s|__version__ = \".*\"|__version__ = \"$VERSION_TO_SET\"|" "$INIT_PY_PATH"
#          fi
#        else
#          echo "__version__ = \"$VERSION_TO_SET\"" >> "$INIT_PY_PATH"
#        fi
#
#        if git diff --quiet "$INIT_PY_PATH"; then
#          echo "No version changes to commit for $INIT_PY_PATH."
#        else
#          git add "$INIT_PY_PATH"
#          git commit -m "chore(model-service): Update version to $VERSION_TO_SET (triggered by tag ${{ github.ref_name }}) [skip ci]"
#          git push origin main
#        fi

    - name: Update version in model-service/__init__.py and push to main (DEBUGGING)
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        VERSION_TO_SET="${{ env.version }}"
        INIT_PY_PATH="model-service/__init__.py" # Ensure this path is 100% correct
        
        echo "--- DEBUG INFO ---"
        echo "Target version to set: $VERSION_TO_SET"
        echo "Target file path: $INIT_PY_PATH"
        
        git config --global user.name 'GitHub Actions Bot'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git fetch origin main
        git checkout -B main origin/main
        
        # --- BEFORE MODIFICATION ---
        echo "--- Before modification attempt ---"
        if [ -f "$INIT_PY_PATH" ]; then
          echo "File exists. Content of $INIT_PY_PATH:"
          cat "$INIT_PY_PATH" | sed -n l # Use 'sed -n l' to show non-printable characters
        else
          echo "File DOES NOT exist at $INIT_PY_PATH before modification."
        fi
        echo "-----------------------------------"
        
        mkdir -p "$(dirname "$INIT_PY_PATH")"
        if [ ! -f "$INIT_PY_PATH" ]; then
          echo "__version__ = \"$VERSION_TO_SET\"" > "$INIT_PY_PATH"
          echo "DEBUG: File was missing, created and initialized."
        fi
        
        if grep -q "__version__ = " "$INIT_PY_PATH"; then
          CURRENT_VERSION_IN_MAIN_INIT_PY=$(grep -oP '__version__ = "\K[^"]+' "$INIT_PY_PATH" || echo "not_found")
          echo "DEBUG: Current version extracted by grep: '$CURRENT_VERSION_IN_MAIN_INIT_PY'"
          echo "DEBUG: Comparing '$CURRENT_VERSION_IN_MAIN_INIT_PY' with '$VERSION_TO_SET'"
        
          if [ "$CURRENT_VERSION_IN_MAIN_INIT_PY" != "$VERSION_TO_SET" ]; then
            echo "DEBUG: Versions are different. Attempting sed replacement..."
            sed -i "s|__version__ = \".*\"|__version__ = \"$VERSION_TO_SET\"|" "$INIT_PY_PATH"
            echo "DEBUG: sed command executed."
          else
            echo "DEBUG: Current version is already the target version. No sed needed."
          fi
        else
          echo "__version__ = \"$VERSION_TO_SET\"" >> "$INIT_PY_PATH"
          echo "DEBUG: '__version__ = ' line not found, appended it."
        fi
        
        # --- AFTER MODIFICATION ---
        echo "--- After modification attempt ---"
        echo "Content of $INIT_PY_PATH now:"
        cat "$INIT_PY_PATH" | sed -n l # Use 'sed -n l' to show non-printable characters
        echo "-----------------------------------"
        
        # --- GIT DIFF CHECK ---
        echo "--- Git diff check ---"
        if git diff --quiet "$INIT_PY_PATH"; then
          echo "No version changes to commit for $INIT_PY_PATH."
        else
          echo "CHANGES DETECTED for $INIT_PY_PATH. Proceeding with commit and push."
          git add "$INIT_PY_PATH"
          git commit -m "chore(model-service): Update version to $VERSION_TO_SET (triggered by tag ${{ github.ref_name }}) [skip ci]"
          git push origin main
          echo "Commit and push command executed."
        fi
        echo "--- END DEBUG INFO ---"

    - name: Build and push Docker image (multi-arch) for model-service
      run: |
        # Assumes this workflow is in the 'model-service' repository, 
        # so github.event.repository.name will be 'model-service'.
        IMAGE_NAME="${{ github.event.repository.name }}" 
        IMG_BASE_LOWER="ghcr.io/${{ github.repository_owner }}/${IMAGE_NAME,,}"
        echo "IMAGE_URL_FOR_RELEASE_NOTES=${IMG_BASE_LOWER}" >> $GITHUB_ENV # For use in release notes

        docker buildx build --platform linux/amd64,linux/arm64 \
          -t $IMG_BASE_LOWER:${{ env.version }} \
          -t $IMG_BASE_LOWER:${{ env.version_major }}.${{ env.version_minor }}.latest \
          -t $IMG_BASE_LOWER:${{ env.version_major }}.latest \
          -t $IMG_BASE_LOWER:latest \
          --push \
          . # Assumes Dockerfile is at the root of the model-service repository

    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }} (model-service)
        body: |
          Automated release for model-service version ${{ github.ref_name }}.

          **Important Note:**
          - Model-service images now support multi-architecture builds for **linux/arm64** and **linux/amd64**.

          Docker images have been pushed to `${{ env.IMAGE_URL_FOR_RELEASE_NOTES }}` with tags:
          - `${{ env.version }}`
          - `${{ env.version_major }}.${{ env.version_minor }}.latest`
          - `${{ env.version_major }}.latest`
          - `latest`

          *Note: The version in `app/__init__.py` on the `main` branch has been updated to `${{ env.version }}` by this workflow.*
        draft: false
        prerelease: false
