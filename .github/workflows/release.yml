name: Release Model Service

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

jobs:
  build_and_release:
    name: Build and Create Stable Release
    runs-on: ubuntu-24.04
    permissions:
      contents: write
      packages: write
      id-token: write

    steps:
    - name: Checkout tagged code
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ github.token }}

    - name: Build and push Docker image
      run: |
        REPO=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
        NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2 | tr '[:upper:]' '[:lower:]')
        IMG_BASE="ghcr.io/${REPO}/${NAME}"
        
        # Use the tag without the 'v' prefix for the version tag
        FULL_TAG=${{ github.ref_name }}
        VERSION_TAG=${FULL_TAG#v}

        docker buildx build --platform linux/amd64,linux/arm64 \
          -t "${IMG_BASE}:${VERSION_TAG}" \
          -t "${IMG_BASE}:latest" \
          --push .

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }} (model-service)
        body: "Stable release for model-service version **${{ github.ref_name }}**."
        draft: false
        prerelease: false

  bump_version_on_main:
    name: Bump Version on Main Branch
    needs: build_and_release
    runs-on: ubuntu-24.04
    permissions:
      contents: write

    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: 'main'

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Calculate next pre-release version
        id: calculate_version
        run: |
          BASE_TAG=${{ github.ref_name }}
          BASE_VERSION=${BASE_TAG#v}
          IFS=. read -r MAJOR MINOR PATCH <<< "$BASE_VERSION"
          
          NEXT_PATCH=$((PATCH + 1))
          TIMESTAMP=$(date -u +%Y%m%d%H%M%S)
          NEXT_VERSION_STRING="$MAJOR.$MINOR.$NEXT_PATCH-pre-$TIMESTAMP"
          
          echo "NEXT_VERSION=$NEXT_VERSION_STRING" >> $GITHUB_ENV

      - name: Update version in app/__init__.py
        run: |
          # This path assumes your Python package source is in an 'app' directory.
          # Adjust if your directory is named something else.
          VERSION_FILE="app/__init__.py"
          sed -i "s/__version__ = \".*\"/__version__ = \"${{ env.NEXT_VERSION }}\"/" ${VERSION_FILE}
          echo "Updated content of ${VERSION_FILE}:"
          cat ${VERSION_FILE}

      - name: Commit and push new version to main
        run: |
          VERSION_FILE="app/__init__.py"
          git add ${VERSION_FILE}
          if git diff --staged --quiet; then
            echo "No version change to commit."
          else
            git commit -m "chore: Bump version to ${{ env.NEXT_VERSION }} for next dev cycle"
            git push origin main
          fi
